class Solution {// Sliding window 
//
public:
    int incremovableSubarrayCount(vector<int>& nums) {
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i >= 2 && nums[i - 1] <= nums[i - 2]) return ans;
            int j = nums.size();
            while(j > i && (j == nums.size() || nums[j] > nums[j - 1]) && (i == 0 || nums[j - 1] > nums[i - 1])) j--;
            ans += (nums.size() + 1 - max(j, i + 1));
        }
        return ans;
    }
};
//SC:O(1) TC:O(n) or O(n^2) unsure
/*Inner While Loop (j decreases)
In the worst case, j starts at n and decrements to i, making it O(n).
Since j does not reset fully for each i, the total number of times j decrements is at most O(n), not O(nÂ²).
Thus, the total work done over the entire loop is O(n) + O(n) = O(n).*/
