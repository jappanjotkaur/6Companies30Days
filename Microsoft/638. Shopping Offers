class Solution {//recursion with memoization (top-down dynamic programming).
public:
    map<vector<int>, int> mp;//hash map(memoization table)stores previously computed results for given needs.
    int solve(vector<int>& price, vector<vector<int>>& special, vector<int> needs){
        int n = price.size();
        int cost = INT_MAX;//Keeps track of the minimum cost found so far.
        vector<int> v = needs;//A copy of needs, used for modifications.

        if(mp.find(needs) != mp.end())return mp[needs];

        for(int i = 0; i < special.size(); i++){
            bool flag = true;//Keeps track of whether the offer is valid 
            int totalPrice = 0;//Calculates the total cost of buying items without any offers.
            for(int j = 0; j < n; j++){
                if(special[i][j] > needs[j])flag= false;
                totalPrice += (price[j] * needs[j]);
            }

            if(flag && totalPrice > special[i][n]){
                for(int j = 0; j < n; j++){
                    v[j] = needs[j] - special[i][j];
                }
                cost = min(cost, special[i][n] + solve(price, special, v));
            }
        }

        if(cost == INT_MAX){
            cost = 0;
            for(int i = 0; i < n; i++){
                cost += price[i]*needs[i];
            }
            cout << cost << endl;
        }

        return mp[needs] = cost;
    }
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        int cost = 0, n = price.size();
        for(int i = 0; i < n; i++){
            cost += (price[i]*needs[i]);
        }
        cost = min(cost, solve(price, special, needs));
        return cost;
    }

};
//TC:O(mÃ—(T+1)^n)
//SC:O((T+1)^n)
//Total Time Complexity:
// In the worst case, for each state, we have to check all special offers. This gives us O(m) operations per state since there are O((T + 1)^n) possible states
/*Memoization Map:
The memoization map stores the result for each unique state of needs, and the number of possible states is O((T + 1)^n).
Therefore, the space complexity due to the memoization map is O((T + 1)^n).
Recursive Call Stack:
The maximum depth of the recursion is O(m) because we explore all offers in each recursive call.
Hence, the space used by the recursive call stack is O(m).
Auxiliary Space:
Temporary vectors such as needs and v have a size of O(n), so the space complexity due to them is O(n).
Total Space Complexity:
The space complexity is dominated by the memoization map, which stores O((T + 1)^n) unique states. */
