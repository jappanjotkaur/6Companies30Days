class Solution {//Used Floyd Warshall. Can also use Dijkstra but FLoyd is preferable bcz u need to compute the shortest paths between all pairs of cities within the distanceThreshold. Floyd-Warshall is an all-pairs shortest path algorithm that is well-suited for dense graphs.
//TC:O(n^3) SC:O(n^2)
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
    vector<vector<int>> dist(n,vector<int> (n,INT_MAX));
    for(auto it:edges){
        dist[it[0]][it[1]]=it[2];
        dist[it[1]][it[0]]=it[2]; // Since the graph is bidirectional
    }
    for(int i=0;i<n;i++) dist[i][i]=0;
    for(int k=0;k<n;k++){// Intermediate node k
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(dist[i][k]==INT_MAX || dist[k][j]==INT_MAX)
                    continue;
                dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);
            }
        }
    }
    int cntCity=n; // Stores the minimum number of reachable cities,  initialized to n (the highest possible value).
    int cityNo = -1;  // Stores the city with the least number of reachable cities
    for(int city=0;city<n;city++){
        int cnt=0; // Count cities reachable within the threshold
        for(int adjCity=0;adjCity<n;adjCity++){
              if(dist[city][adjCity]<=distanceThreshold)
              cnt++;
        }
        if(cnt<=cntCity){
            cntCity=cnt; // update:cntCity to cnt and cityNo to city
            cityNo=city;
        }      
    } 
    return cityNo;
    }
};
