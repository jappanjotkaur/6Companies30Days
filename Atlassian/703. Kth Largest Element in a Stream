//kth larget-min heap efficient
//kth smallest-max heap
class KthLargest {
public:
    KthLargest(int k, vector<int>& nums) : k(k) {
        for (int num : nums) {
            if (minHeap.size() < k) {
                minHeap.push(num);
            } else if (num > minHeap.top()) {
                minHeap.push(num);
                if (minHeap.size() > k) {
                    minHeap.pop();
                }
            }
        }
    }

    int add(int val) {
        if (minHeap.size() < k) {
            minHeap.push(val);
        } else if (val > minHeap.top()) {
            minHeap.push(val);
            minHeap.pop();
        }
        return minHeap.top();
    }

private:
    int k;
    priority_queue<int, vector<int>, greater<int>> minHeap;  // Min-heap to store the k largest elements
};
//  class KthLargest {
//     int num;
//     priority_queue<int, vector<int>, greater<int>> pq;
// public:
//     KthLargest(int k, vector<int>& nums) {
//         num = k; 
//         for(auto ele : nums) {
//             pq.push(ele);
//             if(pq.size() > k) pq.pop();
//         }
//     }
    
//     int add(int val) {
//         pq.push(val);
//         if(pq.size() > num) pq.pop();
//         return pq.top();
//     }
// };
//Time complexity:Construction: O(N * logK),Adding: O(logK)
//Space Complexity: O(K) (can be reduced to O(1) by reusing memory of the existing array

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */
