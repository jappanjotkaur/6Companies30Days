class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        vector<int> lisLength(n,1),prevIndex(n,-1);
        int maxLen=0,index=1;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0 && 1+lisLength[j]>lisLength[i]){
                    lisLength[i]=1+lisLength[j];
                    prevIndex[i]=j;
                }
            }
            if(lisLength[i]>maxLen){
                maxLen=lisLength[i];
                index=i;
            }
        }
        vector<int> ans;
        while(index!=-1){
            ans.push_back(nums[index]);
            index=prevIndex[index];
        }
        return ans;
    }
};


//Same for both:
//Time complexity:O(n^2)
//Space complexity:O(n)

// class Solution {
// public:
//     vector<int> largestDivisibleSubset(vector<int>& nums) {
//         int n=nums.size(), maxi=1, num=-1;
//         vector<int>v;
//         sort(nums.begin(), nums.end());
//         vector<int>dp(n, 1);
//         for(int i=1; i<n; i++){
//             for(int j=0; j<i; j++){
//                 if(!(nums[i]%nums[j]) && dp[i]<dp[j]+1){
//                     dp[i]=dp[j]+1;
//                     if(maxi<dp[i]){
//                         maxi=dp[i];
//                     }
//                 }
//             }
//         }
//         for(int i=n-1; i>=0; i--){
//             if(maxi==dp[i] && (num==-1 || !(num%nums[i]))){
//                 v.push_back(nums[i]);
//                 maxi--;
//                 num=nums[i];
//             }
//         }
//         return v;
//     }
// };



