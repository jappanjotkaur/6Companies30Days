class Solution {//TC:O(n1.n2)  SC:O(1)
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        // try to slide on both side
        return max(solve(nums1, nums2), solve(nums2, nums1));
    }
private:
    int solve(vector<int> &nums1, vector<int> &nums2) {        
        int res = 0;//stores maximum length of common subarray found so far.
        for (int start = 0; start < nums2.size();start++) {
            int acc = 0;//keeps track of current length of common subarray
            for (int i = 0; i < size(nums1) && start + i <nums2.size();i++) {
                if (nums1[i] == nums2[start + i]) acc++;
                else acc = 0;
                
                res = max(res, acc);
            }
        }
        return res;
    }
};
//start + i represents the corresponding index in nums2 that overlaps with nums1[i].
//The loop continues as long as i is within the bounds of nums1 and start + i is within the bounds of nums2.

