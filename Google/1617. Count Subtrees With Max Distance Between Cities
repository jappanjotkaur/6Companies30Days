class Solution {
public:
    vector<int> countSubgraphsForEachDiameter(int n, vector<vector<int>>& edges) {
    vector<vector<int>> d(n, vector<int>(n, n));//d[i][j]:Stores shortest distance b/w nodes i and j & initially, all distances are set to n(large value indicating infinity).
    for (auto &e : edges)
        d[e[0]-1][e[1]-1]=d[e[1]-1][e[0]-1]=1;//input edges are 1-based, so convert them to 0-based indexing and they r bidirectional 
    for (int k = 0; k < n;k++)//Apply Floyd-Warshall Algorithm
        for (int i = 0; i < n;i++)
            for (int j = 0; j < n;j++)
                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
    vector<int> res(n - 1, 0);
    for (int s=0;s<1<<n;++s){//1<<n means means 2ⁿ.Generates all possible subsets of n nodes.
        int max_depth = 0, nodes = 0, edges = 0;
        for (int i = 0; i < n; ++i)
            if (s & (1 << i)) {
                ++nodes;
                for (int j = i + 1; j < n; ++j)
                    if (s & (1 << j)) {
                        edges += d[i][j] == 1;//If i and j are directly connected (d[i][j] == 1), increase edge count.
                        max_depth=max(max_depth,d[i][j]);//Update max_depth with largest shortest distance
                    }
            }
        if (edges == nodes - 1 && max_depth > 0)//Check if the Subset is a Valid Tree
//ensures a connected acyclic subgraph and at least two nodes are present.
            ++res[max_depth - 1];
    }
    return res;
}
};
//Time Complexity:O(n^3+2^n⋅n^2)   Dominated by O(2^n ⋅n^2), making it exponential.
//Space Complexity: O(n^2) (for the distance matrix d).
