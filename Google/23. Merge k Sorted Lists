class mycompare{//TC:O(nlogk)  SC:O(k)
	public:
	bool operator()(const ListNode* a,const ListNode* b){
        return (a->val>b->val);
        }
};	
class Solution {
	public:
	ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode *head=new ListNode(0);//create dummy head node
        ListNode *temp=head;//temp tracks last node in merged list
        priority_queue<ListNode*,vector<ListNode*>,mycompare> pq;//minheap
        for(int i=0;i<lists.size();i++){
            if(lists[i]!=NULL)
             pq.push(lists[i]);//heap now contains the smallest elements from each list
        }
        while(!pq.empty()){
            auto least=pq.top();//gives smallest node in the heap
            pq.pop();//removes it from the heap
            temp->next=least;
            temp=temp->next;
            if(least->next)//If least has a next node, push it into pq
                pq.push(least->next);   
        }
        return head->next;//head is a dummy node, so we return head->next as the start of the merged list
    }
};
