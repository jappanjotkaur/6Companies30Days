//TC:O(n log n)   SC:O(n)
class Solution {
public:
    int maximumProduct(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int>>p;//minheap coz km vale ko increment krenge which will give greater product
        for(int i=0;i<nums.size();i++)  p.push(nums[i]);//Inserting n elements into heap takes O(log n) per insertion.Thus, total complexity for heap initialization= O(n log n).
        while(k--){//takes O(log n) & This process repeats k times.So,TC:O(k log n)
            int x=p.top();
            p.pop();
            x++;
            p.push(x);
        }
        long long mod=1e9+7,mul=1;
        while(!p.empty()){//O(n log n)
            mul=(mul*p.top())%mod;
            p.pop();
        }
        return mul;
    }
};
