class Solution {
public:
    vector<int> smallestTrimmedNumbers(vector<string>& nums, vector<vector<int>>& queries) {
        int n= nums.size(), m= queries.size(), slen= nums[0].size();
        vector<int> ans;
        for(int i=0; i<m; i++){
            int trim = queries[i][1], k = queries[i][0];
            vector<pair<string,int>> v;//Creates vector of pairs where:1st element (string): Trimmed number and 2nd element (int): Original index.
            for(int j=0; j<n; j++){
                v.push_back({nums[j].substr(slen-trim), j});
            }
            sort(v.begin(), v.end());

            ans.push_back(v[k-1].second);//0 based indexing so k-1 is used
        }

        return ans;
    }
};
/*Time ComplexityCmming each number: O(n).
Sorting: O(n log n).
Extracting k-th smallest element: O(1).
Looping over m queries: O(m * (n log n)).
SC:O(n + m)
Extra storage for pairs: O(n).
Final result storage: O(m)*/
