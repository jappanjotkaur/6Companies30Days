//TC:O(logn)   In this,Finding the Peak:O(logn)+Binary Search in Ascending Part:O(logk)+Binary Search in Descending Part:O(log(n−k−1)), where n−k−1 represents the number of elements from the peak to the end of the array
//SC:O(1)
class Solution {
public:
    int findInMountainArray(int target, MountainArray &mountainArr){//Lambda function performs binary search within a given range(left to right)to locate target value. It operates in either:Increasing part of mountain array(isUpside=true) or decreasing part(isUpside = false)
        int length = mountainArr.length();
        auto findTarget = [&](int left, int right, int target, bool isUpside) {
            while (left<=right) {
                int mid=(left+right)/2;
                int midVal = mountainArr.get(mid);
                if (midVal == target) {
                    return mid;
                }
                if (isUpside) {
                    if (target > midVal) {
                        left = mid + 1;
                    } else {
                        right = mid - 1;
                    }
                } else {
                    if (target > midVal) {
                        right = mid - 1;
                    } else {
                        left = mid + 1;
                    }
                }
            }
            return -1;
        };
        auto findPeak = [&]() {// lambda function to find the peak element
            int left = 0;
            int right = length - 1;
            while (left < right) {
                int mid = (left + right) / 2;
                if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            return left;//When left==right, it points to the peak index, so return left
        };
        int peakIndex = findPeak();
        int result=findTarget(0, peakIndex, target, true);//Call on left half(from 0 to peakIndex)
        if (result != -1) {
            return result;
        }
        return findTarget(peakIndex + 1, length - 1, target, false);//Search in the decreasing part (peakIndex + 1 to end)     
    }
};
/*lambda function is anonymous function that can be used inside a function without explicitly declaring it elsewhere. Syntax:[capture](parameters)->return_type{ function_body}
[&]: Captures all external variables by reference.
(int left, int right, int target, bool isUpside): Defines the function parameters.
Function body { ... }: Implements the logic of the function.*/
