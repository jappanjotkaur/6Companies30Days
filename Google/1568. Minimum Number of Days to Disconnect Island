//The solution uses Tarjanâ€™s Algorithm to find articulation points (also called cut vertices). Articulation points are crucial bcz removing them increases the number of connected components.
class Solution {//TC & SC:O(nm)
public:
    int time;
    vector<vector<int>> vis;//Stores discovery time of each cell(if visited).
    vector<vector<int>> low;//Stores lowest discovery time reachable from a given cell
    int d[5] = {0, 1, 0, -1, 0};//used for traversing in 4 directions (right, down, left, up).The extra 0 at the end helps with indexing.
    bool arti;//indicates if an articulation point exists
    
    int minDays(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        arti = false;
        vis = vector<vector<int>>(n, vector<int>(m, 0));// Initialize discovery times.
        low = vector<vector<int>>(n, vector<int>(m, 0));// Initialize low-link values.
        time = 1;
        bool found = false;//Used to check if we have found an island
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < m; ++j) {
                if(grid[i][j] == 1) {
                    if(found)
                        return 0;
                    found = true;
                    art(i, j, grid, -100, -100);
                }
            }
        }

        if(time == 1)
            return 0;//If no land was found, return 0 (no changes needed).

        if(time == 2)
            return 1;//If only one land cell is found, we return 1 as we need to remove it to disconnect.
        if(arti)
            return 1;/// If an articulation point was found, return 1 (removing the articulation point disconnects the grid).
        else
            return 2;// Otherwise, we need 2 removals to disconnect the grid.
    }

    void art(int row, int col, vector<vector<int>>& grid, int parRow, int parCol) {
        grid[row][col] = 0;
        vis[row][col] = time;
        low[row][col] = time;
        time++;
        int child = 0;
        for(int i=0;i<4;++i) {//iterate over 4 possible directions to explore neighboring cells
            int x = d[i] + row;// Calculate the new row
            int y = d[i+1] + col;//// Calculate the new column

            if(x < 0 || y < 0 || x >= grid.size() || y >= grid[0].size() || (x == parRow && y == parCol) || (vis[x][y] == 0 && grid[x][y] == 0))
                continue;
            if(vis[x][y] == 0) {
                child++;
                art(x, y, grid, row, col);
                low[row][col] = min(low[row][col], low[x][y]);
                if(low[x][y] >= vis[row][col] && (parRow != -100 && parCol != -100))
                    arti = true;
            } else {
                low[row][col] = min(low[row][col], vis[x][y]);
            }
        }

        if(parRow == -100 && parCol == -100 && child > 1)
            arti = true;
    }
};
//-100 is used as a special marker value to signify that a node is the root of the DFS traversal, so the algorithm can handle it differently to identify it as an articulation point.
