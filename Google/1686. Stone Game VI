class Solution {//TC:O(nlogn)   SC:O(n)
public:
    int stoneGameVI(vector<int>& aliceValues, vector<int>& bobValues) {
        vector<vector<int>> v;
        int n = aliceValues.size();
        // Store sum of Alice's and Bob's values along with their individual values
        for (int i = 0; i < n; i++) {
            v.push_back({aliceValues[i] + bobValues[i], aliceValues[i], bobValues[i]});
        }
        // Sort in descending order based on sum of values
        sort(v.begin(), v.end(), greater<vector<int>>());
        int a = 0, b = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) { 
                a += v[i][1];  // Alice picks first
            } else {
                b += v[i][2];  // Bob picks second
            }
        }
        // Determine the winner
        if (a == b) return 0;   // Draw
        else if (a > b) return 1;  // Alice wins
        else return -1;  // Bob wins
    }
};

// class Solution {//better soln than 1st one
// public:
//     int stoneGameVI(vector<int>& aliceValues, vector<int>& bobValues) {
//         int alice=0, bob=0, n= bobValues.size();
//         priority_queue<pair<int,int>> pq;

//         for(int i=0; i<n; i++){
//             pq.push({aliceValues[i] + bobValues[i], i});
//         }

//         while(!pq.empty()){
//             alice += aliceValues[pq.top().second]; pq.pop();
//             if(pq.empty()) break;
//             bob += bobValues[pq.top().second]; pq.pop();
//         }

//         if(alice == bob) return 0;
//         if(alice > bob) return 1;
//         return -1;
//     }
// };
//TC:O(nlogn) bcz Insertion into pq=O(nlogn) & Removal from pq=O(nlogn)
//SC:O(n)
