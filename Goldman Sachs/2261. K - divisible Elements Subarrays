class Solution {
public:
    int countDistinct(vector<int>& a, int k, int p) {
        
        // we can use hashmap: with a[i] = 1 if divisible by p else 0.
        int n = a.size(), ans = 0;
        unordered_set<string>s;
        for(int i=0;i<n;i++){
          int cnt = 0;
          string temp = "";
          for(int j = i; j < n; j++){
            //  cnt += (a[j]%p == 0) ? 1 : 0;
            if(a[j]%p == 0) cnt++;
             if(cnt <= k) { temp += a[j]; s.insert(temp);}
             if(cnt>k)break;
          }
          // s.insert(temp);
        }
        return s.size(); // count of distinct sets.

    }
};

/*Worst-Case Time Complexity: O(n³) coz String concatenation & hashing 
Average/Best Case Complexity: O(n²) (assuming fast string hashing and insertions).

Space Complexity:Unordered set (s) stores unique subarrays as strings.
The worst case is when all subarrays are unique → O(n²).
String temp holds subarrays dynamically → O(n).
Worst-Case Space Complexity: O(n²) (if all subarrays are unique).
Best Case: O(1) (if all elements are identical and few unique subarrays exist).*/
