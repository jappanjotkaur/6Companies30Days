/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:    
    int solve(TreeNode* root, int &sum, int &minVal, int &maxVal) {
        if (!root) {
            minVal = INT_MAX;
            maxVal = INT_MIN;
            return 0;
        }
        int leftSum = 0, rightSum = 0;
        int leftMin = INT_MAX, leftMax = INT_MIN;
        int rightMin = INT_MAX, rightMax = INT_MIN;
        leftSum = solve(root->left, sum, leftMin, leftMax);
        rightSum = solve(root->right, sum, rightMin, rightMax);
        bool isValidBST = (!root->left || root->val > leftMax) &&
                          (!root->right || root->val < rightMin);
        if (isValidBST) {
            int currSum = root->val + leftSum + rightSum;
            sum = max(sum, currSum);
            minVal = min(root->val, leftMin);
            maxVal = max(root->val, rightMax);
            return currSum;
        } else {
            minVal = INT_MIN;
            maxVal = INT_MAX;
            return 0;
        }
    }    
    int maxSumBST(TreeNode* root) {
        int maxSum = 0;
        int minVal, maxVal;
        solve(root, maxSum, minVal, maxVal);
        return maxSum;
    }
};
//TC:O(n)
//SC:In the worst case, if the tree is skewed (like a linked list), the recursion depth will be O(N) and in the best case (balanced tree), the recursion depth is O(log N).
