class Solution {//Instead of using DP, we use Combinatorics (Binomial Coefficients).
public:
    int p = 1e9 + 7;
    int numberOfWays(int a, int b, int k) {
        if((a-b-k)%2) return 0;//If remaining steps after reaching b is odd,it's impossible to reach b exactly
        if (abs(a - b) > k) return 0;//If total distance > k,return 0.
        long long res=1L;//res stores result of C(k,r) n 1L makes it long long to handle large values.
        for (int i = 0; i < (b - a + k) / 2; ++i) {//calculates the binomial coefficient C(k,r)
            res=res*(k-i)%p;//multiplies result by appropriate numerator
            res=res*inv(i+1)%p;//multiplies by modular inverse of denominator
        }
        return res;
    }
    long inv(long a) {
        if (a == 1) return 1;
        return (p-p/a)*inv(p%a)%p;//(p-p/a) is equivalent to 𝑎^(𝑝−2) mod 𝑝 
    }
};
//Time Complexity: O(k⋅logp)
//Space Complexity: O(logp)
