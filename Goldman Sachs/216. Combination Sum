class Solution {//TC & SC: O(C(9,k)*k) where C(9, k) is number of valid combinations for given k and n.
private:
    void helper(int ind,int sum,int n,vector<vector<int>>& ans,vector<int>& ans2,int k){
        if(sum==n && k==0){
            ans.push_back(ans2);
            return;
        }
        if(sum>n){
            return;
        }
        for(int i=ind;i<=9;i++){
            if(i>n){
                break;
            }
            ans2.push_back(i);
            helper(i+1,sum+i,n,ans,ans2,k-1);
            ans2.pop_back();
        }
    }
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> ans2;
        vector<vector<int>> ans;
        helper(1,0,n,ans,ans2,k);
        return ans;        
    }
};
/*The recursive call(backtracking):
i + 1: We move to the next number (so the numbers are strictly increasing).
sum + i: We add the current number to the sum.
k - 1: We reduce k by 1 because weâ€™ve used one element.
This recursive step explores combinations with the current number i.*/
