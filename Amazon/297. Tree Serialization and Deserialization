//Using level order traversal
 //TC & SC: O(N)
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {//convert root to string
      if(!root) return "";

      string s="";
      queue<TreeNode*> q;
      q.push(root);
      while(!q.empty()){
        TreeNode* curNode=q.front();
        q.pop();
        if(curNode==NULL) s.append("#,");
        else s.append(to_string(curNode->val)+',');
        if(curNode!=NULL){
            q.push(curNode->left);
            q.push(curNode->right);
        }
      }  
      return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {//convert string to root
        if(data.size()==0) return NULL;
        stringstream s(data); //Convert string data into a stringstream for easy parsing.
        string str;
        getline(s,str,',');//Extract the first value (the root node)
        TreeNode *root=new TreeNode(stoi(str));//converting a string to an integer.
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            TreeNode *node=q.front();
            q.pop();
            getline(s,str,',');//Read the next value (left child) from the string.
            if(str=="#"){
                node->left=NULL;
            }
            else{
                TreeNode* leftNode=new TreeNode(stoi(str));
                node->left=leftNode;
                q.push(leftNode);
            }
            getline(s,str,',');//read the next value (right child) from the string.
            if(str=="#"){
                node->right=NULL;
            }
            else{
                TreeNode* rightNode=new TreeNode(stoi(str));
                node->right=rightNode;
                q.push(rightNode);
            }
        }
        return root;
    }
};
