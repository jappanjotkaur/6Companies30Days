class Solution {//Recursion+Memoization(used map by converting changong variables into string)
//SC and TC:O(log k)
public:
    int K;
    vector<long long> power;//2^31 -1
    unordered_map<string,int> mp;
    int solve(int i,int jump, int canGoback){

        if(i>K+1){
            return 0;
        }
        string key=to_string(i)+"_"+to_string(jump)+"_"+to_string(canGoback);
        if(mp.find(key)!=mp.end()){
            return mp[key];
        }
        int ways=0;
        if(i==K){
            ways+=1;
        }
        if(canGoback==1){
            ways+=solve(i-1,jump,0);//i-1
        }
        ways+=solve(i+power[jump], jump+1,1);// ways+=solve(i+pow(2,jump), jump+1,1); This way it would call power function many times
        return mp[key]=ways; //i+2^jump
    }
    int waysToReachStair(int k) {
        K=k;
        power.resize(32);//for power optimisation
        for(int i=0;i<=31;i++){
            power[i]=pow(2,i);
        }
        return solve(1,0,1);
    }
};
