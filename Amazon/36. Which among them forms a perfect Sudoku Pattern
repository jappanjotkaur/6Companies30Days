/*Time Complexity :
The soln involves nested loops that iterate through each cell of the 9x9 Sudoku board. Therefore, the time complexity is O(9 * 9) or O(1) since the board size remains constant.
Space Complexity (SC): O(9 * 9) or O(81)  --> O(1)*/
class Solution {
public:
     bool isValidSudoku(vector<vector<char>>& board) {
        int row[9][9] = {0};
        int col[9][9] = {0};
        int subMat[3][3][9] = {0}; //grid
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.')
                    continue;
                else {
                    int num = board[i][j] - '1';//If the cell contains a number ('1' to '9'), its value is converted to a zero-based index (0 to 8) by subtracting '1' from the character.
                    if (row[i][num] == 1 or col[j][num] == 1 or subMat[i / 3][j / 3][num] == 1)
                        return false;
                    row[i][num] = 1; //current number num is marked as seen
                    col[j][num] = 1;
                    subMat[i / 3][j / 3][num] = 1;
                }
            }
        }
        return true;
    }
};
/* if (row[i][num] == 1 or col[j][num] == 1 or subMat[i / 3][j / 3][num] == 1)
        return false;
This if statement checks if the current number num has already been seen:
In the same row (row[i][num] == 1)
In the same column (col[j][num] == 1)
In the same 3x3 subgrid (subMat[i / 3][j / 3][num] == 1)
The subgrid is determined by integer division of i and j by 3.
If any of these conditions is true, the Sudoku board is invalid, so the function returns false.*/
